/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_BUTTON_H
#define _MOCK_BUTTON_H

#include "unity.h"
#include "button.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_button_Init(void);
void mock_button_Destroy(void);
void mock_button_Verify(void);




#define button_init_IgnoreAndReturn(cmock_retval) button_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void button_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ERR_t cmock_to_return);
#define button_init_StopIgnore() button_init_CMockStopIgnore()
void button_init_CMockStopIgnore(void);
#define button_init_ExpectAndReturn(cmock_retval) button_init_CMockExpectAndReturn(__LINE__, cmock_retval)
void button_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ERR_t cmock_to_return);
typedef ERR_t (* CMOCK_button_init_CALLBACK)(int cmock_num_calls);
void button_init_AddCallback(CMOCK_button_init_CALLBACK Callback);
void button_init_Stub(CMOCK_button_init_CALLBACK Callback);
#define button_init_StubWithCallback button_init_Stub
#define button_getState_IgnoreAndReturn(cmock_retval) button_getState_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void button_getState_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, Buttons_state_t cmock_to_return);
#define button_getState_StopIgnore() button_getState_CMockStopIgnore()
void button_getState_CMockStopIgnore(void);
#define button_getState_ExpectAndReturn(btn, cmock_retval) button_getState_CMockExpectAndReturn(__LINE__, btn, cmock_retval)
void button_getState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Buttons_t btn, Buttons_state_t cmock_to_return);
typedef Buttons_state_t (* CMOCK_button_getState_CALLBACK)(Buttons_t btn, int cmock_num_calls);
void button_getState_AddCallback(CMOCK_button_getState_CALLBACK Callback);
void button_getState_Stub(CMOCK_button_getState_CALLBACK Callback);
#define button_getState_StubWithCallback button_getState_Stub
#define button_updateState_IgnoreAndReturn(cmock_retval) button_updateState_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void button_updateState_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, ERR_t cmock_to_return);
#define button_updateState_StopIgnore() button_updateState_CMockStopIgnore()
void button_updateState_CMockStopIgnore(void);
#define button_updateState_ExpectAndReturn(testNum, cmock_retval) button_updateState_CMockExpectAndReturn(__LINE__, testNum, cmock_retval)
void button_updateState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, unsigned char testNum, ERR_t cmock_to_return);
typedef ERR_t (* CMOCK_button_updateState_CALLBACK)(unsigned char testNum, int cmock_num_calls);
void button_updateState_AddCallback(CMOCK_button_updateState_CALLBACK Callback);
void button_updateState_Stub(CMOCK_button_updateState_CALLBACK Callback);
#define button_updateState_StubWithCallback button_updateState_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
